precision highp float;

uniform highp vec3 ScreenFrontDirection;
uniform highp vec3 ScreenUpDirection;
uniform highp vec3 ScreenRightDirection;

uniform vec3 LightDirections[6];
uniform vec3 LightReflectionDirections[6]; // 2x apart
uniform vec3 LightColors[6];

uniform vec2 PixelSize;

varying vec2 UV;
varying vec3 FOVNormal;

void main()
{
    // example values
    vec2 normal_map_value = vec2(0, 0);
    vec3 base_color = vec3(1.0, 0.0, 0.5);
    vec3 reflections_color = vec3(1.0, 1.0, 1.0);

    vec3 lights = vec3(0, 0, 0);
    vec3 reflections = vec3(0, 0, 0);
    vec3 normal_map_diff = normal_map_value.x * ScreenRightDirection
                         + normal_map_value.y * ScreenUpDirection;
    vec3 normal = normalize(ScreenFrontDirection + normal_map_diff);
    vec3 reflection_normal = normalize(FOVNormal + 2.0 * normal_map_diff);

    for (int i = 0; i < 8; i++)
    {
        lights += LightColors[i] * max(dot(normal, LightDirections[i]), 0.0);
        reflections += LightColors[i] * pow(max(dot(reflection_normal, LightReflectionDirections[i]), 0.0), 40.0);
    }

    gl_FragColor = vec4(base_color * lights + reflections_color * reflections, 1.0);
}
